<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SCE.Objects</name>
    </assembly>
    <members>
        <member name="T:SCE.CContainer">
            <summary>
            A class containing components and the ICContainerHolder.
            Used for storing components by a holder.
            </summary>
        </member>
        <member name="P:SCE.CContainer.AssignableTypeSet">
            <summary>
            A set containing cached components types.
            </summary>
        </member>
        <member name="M:SCE.CContainer.Update">
            <summary>
            Calls update for every <see cref="T:SCE.IComponent"/> in this instance.
            </summary>
        </member>
        <member name="T:SCE.InvalidCContainerHolderException">
            <summary>
            Represents errors thrown when an incompatible <see cref="T:SCE.IComponent"/> is added to a component holder.
            </summary>
        </member>
        <member name="M:SCE.InvalidCContainerHolderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SCE.InvalidCContainerHolderException"/> class.
            </summary>
        </member>
        <member name="M:SCE.InvalidCContainerHolderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SCE.InvalidCContainerHolderException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:SCE.ICContainerHolder">
            <summary>
            An interface between the CContainer and its holder instance.
            </summary>
        </member>
        <member name="P:SCE.ICContainerHolder.Components">
            <summary>
            Gets the CContainer.
            </summary>
        </member>
        <member name="T:SCE.IComponent">
            <summary>
            Allows <see cref="T:SCE.IComponent"/> classes to modularly interface with their holder.
            </summary>
        </member>
        <member name="T:SCE.Camera">
            <summary>
            Represents a camera in a world space.
            </summary>
        </member>
        <member name="M:SCE.Camera.SetCContainer(SCE.CContainer,SCE.ICContainerHolder)">
            <inheritdoc/>
        </member>
        <member name="T:SCE.StaticCameraTrackComponent">
            <summary>
            An <see cref="T:SCE.IComponent"/> used for static object camrea tracking.
            </summary>
        </member>
        <member name="M:SCE.StaticCameraTrackComponent.#ctor(SCE.SCEObject)">
            <summary>
            Initializes a new instance of the <see cref="T:SCE.StaticCameraTrackComponent"/> class.
            </summary>
            <param name="obj">The object to track.</param>
        </member>
        <member name="P:SCE.StaticCameraTrackComponent.Object">
            <summary>
            Gets or sets the controlled camera.
            </summary>
        </member>
        <member name="P:SCE.StaticCameraTrackComponent.Anchor">
            <summary>
            Gets or sets the position anchor of the controlled camera.
            </summary>
        </member>
        <member name="M:SCE.StaticCameraTrackComponent.Update">
            <inheritdoc/>
        </member>
        <member name="T:SCE.ZoneCameraTrackComponent">
            <summary>
            An <see cref="T:SCE.IComponent"/> used for zone-based object camera tracking.
            </summary>
        </member>
        <member name="M:SCE.ZoneCameraTrackComponent.#ctor(SCE.SCEObject,SCE.Rect2D,SCE.Vector2Int)">
            <summary>
            Initializes a new instance of the <see cref="T:SCE.ZoneCameraTrackComponent"/> class.
            </summary>
            <param name="obj">The objcet to track.</param>
            <param name="boundingArea">The area the zone is bounded to.</param>
            <param name="zoneDimensions">The dimensions of the zone.</param>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="zoneDimensions"/> are invalid.</exception>
        </member>
        <member name="P:SCE.ZoneCameraTrackComponent.Object">
            <summary>
            Gets or sets the object to track.
            </summary>
        </member>
        <member name="P:SCE.ZoneCameraTrackComponent.BoundingArea">
            <summary>
            Gets or sets the camera bounding area.
            </summary>
        </member>
        <member name="P:SCE.ZoneCameraTrackComponent.ZoneDimensions">
            <summary>
            Gets or sets the dimensions of the camera zone.
            </summary>
        </member>
        <member name="P:SCE.ZoneCameraTrackComponent.ZoneAnchor">
            <summary>
            Gets or sets the anchor of the zone.
            </summary>
        </member>
        <member name="P:SCE.ZoneCameraTrackComponent.CameraAnchor">
            <summary>
            Gets or sets the anchor of the camera.
            </summary>
        </member>
        <member name="T:SCE.RenderComponent2D">
            <summary>
            An <see cref="T:SCE.IComponent"/> used for storing an <see cref="T:SCE.IRenderable"/> in an object.
            </summary>
        </member>
        <member name="M:SCE.RenderComponent2D.#ctor(SCE.IRenderable)">
            <summary>
            Initializes a new instance of the <see cref="T:SCE.RenderComponent2D"/> class.
            </summary>
            <param name="renderable">The initial <see cref="T:SCE.IRenderable"/>.</param>
        </member>
        <member name="T:SCE.SpritePackage">
            <summary>
            A struct used for containing an image and its offset for rendering.
            </summary>
        </member>
        <member name="M:SCE.SpritePackage.#ctor(SCE.DisplayMap,System.Int32,SCE.Vector2Int)">
            <summary>
            Initializes a new instance of the <see cref="T:SCE.SpritePackage"/> struct.
            </summary>
            <param name="dpMap">The displaymap to render.</param>
            <param name="offset">The offset of the image to render.</param>
        </member>
        <member name="M:SCE.WorldSpaceRHC.Update">
            <inheritdoc/>
        </member>
        <member name="M:SCE.WorldSpaceRHC.OnLoad(SCE.SCEObject,SCE.IRenderable)">
            <inheritdoc/>
        </member>
        <member name="P:SCE.RangeOccluder.Name">
            <inheritdoc/>
        </member>
        <member name="P:SCE.RangeOccluder.IsActive">
            <inheritdoc/>
        </member>
        <member name="M:SCE.RangeOccluder.ShouldRender(SCE.SCEObject)">
            <inheritdoc/>
        </member>
        <member name="M:SCE.ChildSet.Add(SCE.SCEObject)">
            <inheritdoc/>
        </member>
        <member name="M:SCE.ChildSet.Remove(SCE.SCEObject)">
            <inheritdoc/>
        </member>
        <member name="M:SCE.ChildSet.Clear">
            <inheritdoc/>
        </member>
        <member name="P:SCE.SCEObject.Children">
            <summary>
            Gets the direct children of the object.
            </summary>
        </member>
        <member name="P:SCE.SCEObject.Components">
            <summary>
            Gets the components of the object.
            </summary>
        </member>
        <member name="P:SCE.SCEObject.IsActive">
            <summary>
            Gets or sets a value indicating whether this object is active.
            </summary>
        </member>
        <member name="P:SCE.SCEObject.WorldIsActive">
            <summary>
            Gets a value indicating the combined active state of this object.
            </summary>
        </member>
        <member name="P:SCE.SCEObject.Position">
            <summary>
            Gets or sets the local position of this object.
            </summary>
        </member>
        <member name="P:SCE.SCEObject.WorldPosition">
            <summary>
            Gets the world position of this object.
            </summary>
        </member>
        <member name="M:SCE.SCEObject.WorldGridPosition">
            <summary>
            Returns the rounded world position of this object.
            </summary>
            <returns>The rounded world position of this object.</returns>
        </member>
        <member name="M:SCE.SCEObject.RecursiveGetDescendents">
            <summary>
            Recursively resolves every descendent of this object. 
            </summary>
            <returns>A list containing every descendent of this object. </returns>
        </member>
        <member name="P:SCE.SCEObject.Parent">
            <summary>
            Gets the parent of the object.
            </summary>
        </member>
        <member name="P:SCE.SCEObject.HasParent">
            <summary>
            Gets a value indicating whether this object has a parent.
            </summary>
        </member>
        <member name="P:SCE.SCEObject.World">
            <summary>
            Gets the world of the object.
            </summary>
        </member>
        <member name="P:SCE.SCEObject.HasWorld">
            <summary>
            Gets a value indicating whether this object has a world.
            </summary>
        </member>
        <member name="M:SCE.SCEObject.Start">
            <inheritdoc/>
        </member>
        <member name="M:SCE.SCEObject.Update">
            <inheritdoc/>
        </member>
        <member name="M:SCE.SCEObject.ToString">
            <inheritdoc/>
        </member>
        <member name="P:SCE.World.Objects">
            <summary>
            Gets every descendent of the world.
            </summary>
        </member>
        <member name="M:SCE.World.Start">
            <inheritdoc/>
        </member>
        <member name="M:SCE.World.Update">
            <inheritdoc/>
        </member>
    </members>
</doc>
